public static JPanel showTetrahedron(JSlider headingSlider, JSlider pitchSlider){
        JPanel renderPanel = new JPanel() {
        public void paintComponent(Graphics graphics) {
            Graphics2D graphics2d = (Graphics2D) graphics;
            graphics2d.setColor(Color.BLACK);
            graphics2d.fillRect(0, 0, getWidth(), getHeight());

            //create a tetrahedron
            Tetrahedron tetrahedron = creatTetrahedron();
            
            //heading for left-right rotation
            double heading = Math.toRadians(headingSlider.getValue());

            //create matrix and display it
            Matrix3 headingTransform = new Matrix3(new double[] {
                Math.cos(heading), 0, Math.sin(heading),
                0, 1, 0,
                -Math.sin(heading), 0, Math.cos(heading)
            });

            //pitch for up-down rotation
            double pitch = Math.toRadians(pitchSlider.getValue());
            Matrix3 pitchTransform = new Matrix3(new double[] {
                    1, 0, 0,
                    0, Math.cos(pitch), Math.sin(pitch),
                    0, -Math.sin(pitch), Math.cos(pitch)
                });

            //combining the matrixes by multipliying them
            Matrix3 transform = headingTransform.multiply(pitchTransform);

            BufferedImage img = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);

            //add z-buffer
            double[] zBuffer = new double[img.getWidth() * img.getHeight()];
            // initialize array with extremely far away depths
            for (int q = 0; q < zBuffer.length; q++) {
                zBuffer[q] = Double.NEGATIVE_INFINITY;
            }

            for (Triangle t : tetrahedron.triangles) {
                Vertex v1 = transform.transform(t.v1);
                Vertex v2 = transform.transform(t.v2);
                Vertex v3 = transform.transform(t.v3);

                //move vertices to the center of screen
                v1.x += getWidth() / 2;
                v1.y += getHeight() / 2;
                v2.x += getWidth() / 2;
                v2.y += getHeight() / 2;
                v3.x += getWidth() / 2;
                v3.y += getHeight() / 2;

                //shading
                //calculate edges
                Vertex ab = new Vertex(v2.x - v1.x, v2.y - v1.y, v2.z - v1.z);
                Vertex ac = new Vertex(v3.x - v1.x, v3.y - v1.y, v3.z - v1.z);

                //callculate normal
                Vertex norm = new Vertex(
                    ab.y * ac.z - ab.z * ac.y,
                    ab.z * ac.x - ab.x * ac.z,
                    ab.x * ac.y - ab.y * ac.x
                );

                double normalLength = calculateNormalLength(norm);
                //calculate cosine between triangle normal and light direction
                double angleCos = Math.abs(norm.z);

                //get shade
                Color shadedColor = getShade(t.color, angleCos);
            
                // compute rectangular bounds for triangle
                int minX = (int) Math.max(0, Math.ceil(Math.min(v1.x, Math.min(v2.x, v3.x))));
                int maxX = (int) Math.min(img.getWidth() - 1,  Math.floor(Math.max(v1.x, Math.max(v2.x, v3.x))));
                int minY = (int) Math.max(0, Math.ceil(Math.min(v1.y, Math.min(v2.y, v3.y))));
                int maxY = (int) Math.min(img.getHeight() - 1, Math.floor(Math.max(v1.y, Math.max(v2.y, v3.y))));
            
                double triangleArea = (v1.y - v3.y) * (v2.x - v3.x) + (v2.y - v3.y) * (v3.x - v1.x);
                //color pixels and shade
                for (int y = minY; y <= maxY; y++) {
                    for (int x = minX; x <= maxX; x++) {
                        double b1 = 
                          ((y - v3.y) * (v2.x - v3.x) + (v2.y - v3.y) * (v3.x - x)) / triangleArea;
                        double b2 =
                          ((y - v1.y) * (v3.x - v1.x) + (v3.y - v1.y) * (v1.x - x)) / triangleArea;
                        double b3 =
                          ((y - v2.y) * (v1.x - v2.x) + (v1.y - v2.y) * (v2.x - x)) / triangleArea;
                        if (b1 >= 0 && b1 <= 1 && b2 >= 0 && b2 <= 1 && b3 >= 0 && b3 <= 1) {

                            double depth = b1 * v1.z + b2 * v2.z + b3 * v3.z;
                            int zIndex = y * img.getWidth() + x;
                            if (zBuffer[zIndex] < depth) {
                                img.setRGB(x, y, shadedColor.getRGB());
                                zBuffer[zIndex] = depth;
                            }
                        }
                    }
                }
            
            }
            
            graphics2d.drawImage(img, 0, 0, null);
            
            
            
        }
        
    };
    return renderPanel;
    }